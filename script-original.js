"use strict";

function isTicketNotePage() {
  return document.URL.includes("AgentTicketNote");
}

function isTicketCreationPage() {
  return document.URL.includes("AgentTicketPhone");
}

function isRequestRecord() {
  const service = document.querySelector("#ServiceID_Search").nextSibling; // Corrigido para comparação

  if (!service) {
    return null;
  }

  return service.textContent === "Registro de Requisiçõesx";
}

function isTicketInService() {
  let serviceState;

  Array.from(
    document
      .querySelector("#Core_UI_AutogeneratedID_1")
      .querySelectorAll("label")
  ).forEach((label) => {
    if (label.textContent === "Estado:") {
      serviceState = label.nextElementSibling.title;
    }
  });

  return serviceState === "Em Atendimento";
}

function isLevelAlertAdded() {
  const span = document.querySelector("#QueueAlert");

  if (span) {
    return true;
  }
  return false;
}

function removeLevelAlertAdded() {
  document.querySelector("#QueueAlert").remove();
}

function serviceRemover() {
  const service =
    document.querySelector("#ServiceID_Search").nextSibling.children[1]
      .firstChild;
  if (service) {
    service.click();
  }
}

function isServiceEmpty() {
  return (
    document.querySelector("#ServiceID_Search").parentElement.children.length ==
    1
  );
}

function isTypeOfServiceIsNotEmpty() {
  const element = document.querySelector(
    "#DynamicField_PRITipoAtendimento_Search"
  ).nextElementSibling.firstChild;
  console.log(isTypeOfServiceRemoved(), element.textContent);
  return (
    element.textContent === "Presencial" || element.textContent === "Remoto"
  );
}

function addAlertToTypeOfService() {
  const span = document.createElement("span");
  span.id = "TypeOfServiceAlert";
  span.textContent =
    "⚠️ Garanta que o tipo de atendimento seja adequado ao serviço oferecido.";
  span.style.color = "red";
  span.style.fontWeight = "bold";

  document
    .querySelector(".Row.Row_DynamicField_PRITipoAtendimento")
    .children[1].appendChild(span);
}

function isTypeOfServiceAlertAdded() {
  const span = document.querySelector("#TypeOfServiceAlert");

  if (span) {
    return true;
  }
  return false;
}

function removeTypeOfServiceAlert() {
  const span = document.querySelector("#TypeOfServiceAlert");

  if (span) {
    span.style.display = "none";
  }
}

function addAlertToServiceClassification() {
  const span = document.createElement("span");
  span.id = "ServiceClassificationAlert";
  span.textContent =
    "⚠️ Garanta que a classificação do serviço seja adequada ao atendimento.";
  span.style.color = "red";
  span.style.fontWeight = "bold";

  const br = document.createElement("br");

  document.querySelector("#ServiceIDError").parentElement.appendChild(br);
  document.querySelector("#ServiceIDError").parentElement.appendChild(span);
}

function getCurrentLevel() {
  let level = document
    .querySelectorAll(".InputField_Selection")[3]
    .textContent.split(" -")[0];
  level = level.replace("l", "l ");
  return level;
}

function addAlertToQueue(level, currentLevel) {
  const span = document.createElement("span");
  span.id = "QueueAlert";
  span.textContent = `⚠️ Você pertence ao ${level} e está abrindo um chamado para ${currentLevel}.`;
  span.style.color = "red";
  span.style.fontWeight = "bold";

  document.querySelector("#DestServerError").parentElement.appendChild(span);
}

function isServiceClassificationAlertAdded() {
  const span = document.querySelector("#ServiceClassificationAlert");

  if (span) {
    return true;
  }
  return false;
}

function removeServiceClassificationAlert() {
  const span = document.querySelector("#ServiceClassificationAlert");

  if (span) {
    span.remove();
  }
}

function changeTypeOfService() {
  const select = document.querySelector("#DynamicField_PRITipoAtendimento");

  if (!select.dataset.removed) {
    select.value = null;
    select.dataset.removed = true;
  }
}

function isTypeOfServiceRemoved() {
  const status = document.querySelector("#DynamicField_PRITipoAtendimento")
    .dataset.removed;

  if (status) {
    return true;
  }
  return false;
}

function setMutationObserverToNextStateDiv() {
  const nextStateDiv =
    document.querySelector("#NewStateID_Search").parentElement;

  const config = {
    childList: true,
    subtree: false,
  };

  const callback = function (mutationList, _) {
    for (let mutation of mutationList) {
      if (mutation.type === "childList") {
        // Corrigido para comparação
        if (
          nextStateDiv.children.length > 1 &&
          nextStateDiv.children[1].textContent === "Aguardando Validaçãox"
        ) {
          const span = document.querySelector("#TypeOfServiceAlert");
          if (!span) {
            addAlertToTypeOfService();
            changeTypeOfService();
          }

          if (isRequestRecord()) {
            serviceRemover();
            addAlertToServiceClassification();
          }
        }
      }
    }
  };

  const observer = new MutationObserver(callback);
  observer.observe(nextStateDiv, config);
}

function setMutationObserverToServiceDiv(level) {
  const ServiceDiv = document.querySelector("#Dest_Search").parentElement;

  const userLevel = level;

  const config = {
    childList: true,
    subtree: false,
  };

  const callback = function (mutationList, _) {
    for (let mutation of mutationList) {
      if (mutation.type === "childList") {
        const currentLevel = getCurrentLevel();
        const levelAlertAdded = isLevelAlertAdded();

        if (userLevel !== currentLevel) {
          if (!levelAlertAdded) {
            addAlertToQueue(userLevel, currentLevel);
          } else {
            removeLevelAlertAdded();
            addAlertToQueue(userLevel, currentLevel);
          }
        } else if (userLevel === currentLevel && levelAlertAdded) {
          try {
            removeLevelAlertAdded();
          } catch {}
        }
      }
    }
  };

  const observer = new MutationObserver(callback);
  observer.observe(ServiceDiv, config);
}

function setMutationObserverToServiceClassification() {
  const serviceDiv = document.querySelector("#ServiceID_Search").parentElement;

  const config = {
    childList: true,
    subtree: false,
  };

  const callback = function (mutationList, _) {
    for (let mutation of mutationList) {
      if (mutation.type === "childList") {
        if (
          isServiceClassificationAlertAdded() &&
          !isRequestRecord() &&
          !isServiceEmpty()
        ) {
          removeServiceClassificationAlert();
        }
      }
    }
  };

  const observer = new MutationObserver(callback);
  observer.observe(serviceDiv, config);
}

function delay(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

// Função para buscar e processar o conteúdo como DOM
async function fetchAndParseDOM() {
  try {
    // Fazendo a requisição para a URL
    const response = await fetch(
      "https://atendetiadmin.agro.gov.br/otrs/index.pl?Action=AgentPreferences;Subaction=Group;Group=UserProfile",
      {
        method: "GET",
        credentials: "include", // Inclui cookies para autenticação, se necessário
      }
    );

    // Verificando se a requisição foi bem-sucedida
    if (!response.ok) {
      throw new Error(`Erro na requisição: ${response.status}`);
    }

    // Obtendo o conteúdo da resposta como texto
    const text = await response.text();

    // Convertendo o texto em um documento DOM
    const parser = new DOMParser();
    const doc = parser.parseFromString(text, "text/html");

    return doc; // Retorna o DOM para manipulações adicionais
  } catch (error) {
    console.error("Erro ao buscar e processar DOM:", error);
  }
}

function extractLevel(dom) {
  let level;
  Array.from(dom.querySelector("#UserArea.Modernize").children).forEach((e) => {
    if (e.selected) {
      level = e.title;
    }
  });
  return level;
}

function addDivAlert() {
  const div = document.querySelector(
    ".MainBox.ARIARoleMain.TicketZoom.UseArticleColors"
  );
  const a = document.createElement("a");

  a.href = Array.from(document.querySelector(".Actions").querySelectorAll("li"))
    .filter((li) => {
      return li.textContent.includes("Fila");
    })[0]
    .querySelector("a").href;

  a.textContent =
    "Você está atendendo um chamado de outra fila! Clique aqui para alterar a fila.";
  a.style =
    "background-color: #ffbbb0; padding: 1rem; display: flex; text-align: center; justify-content: center; color: #550000; font-weight: bold; font-size: 15px;";

  div.prepend(a);
}

function isOwner() {
  const username = document
    .querySelector(".UserAvatar")
    .querySelector("span").textContent;
  let ownerName;

  Array.from(
    document
      .querySelector("#Core_UI_AutogeneratedID_1")
      .querySelectorAll("label")
  ).forEach((label) => {
    if (label.textContent === "Proprietário:") {
      ownerName = label.nextElementSibling.title.split(" (")[0];
    }
  });

  return username === ownerName;
}

function isTicketZoomPage() {
  return document.URL.includes("AgentTicketZoom;TicketID");
}

async function isCorrectQueue() {
  const doc = await fetchAndParseDOM();
  const level = extractLevel(doc);
  let currentLevel;
  const children = document.querySelector(
    ".TableLike.FixedLabelSmall.Narrow"
  ).children;

  Array.from(children).forEach((child, index) => {
    if (child.textContent == "Fila:") {
      currentLevel = children[index + 1];
      currentLevel = currentLevel.title
        .split("::")[1]
        .split(" -")[0]
        .replace("l", "l ");
      return;
    }
  });

  return level === currentLevel;
}

async function init() {
  if (isTicketCreationPage()) {
    const doc = await fetchAndParseDOM();
    const level = extractLevel(doc);
    setMutationObserverToServiceDiv(level);
  }

  if (isTicketNotePage()) {
    setMutationObserverToNextStateDiv();
    setMutationObserverToServiceClassification();
  }

  if (isTicketZoomPage() && isOwner() && isTicketInService()) {
    const queue = await isCorrectQueue();
    if (!queue) {
      addDivAlert();
    }
  }
}

window.addEventListener("load", async function () {
  await delay(500); // Aguarda 2 segundos

  init(); // Chama a função init após 2 segundos e após o carregamento da página
});
