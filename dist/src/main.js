/**
 * Main Application Entry Point - Help OTRS Extension
 * 
 * Orquestra todos os m√≥dulos da extens√£o e controla o fluxo principal de execu√ß√£o.
 * 
 * @author Help OTRS Team
 * @version 2.2.0
 */

(function() {
    'use strict';

    // Aguardar carregamento de todos os m√≥dulos
    function waitForModules() {
        return new Promise((resolve) => {
            const checkModules = () => {
                if (window.HelpOTRS && 
                    window.HelpOTRS.ConfigManager &&
                    window.HelpOTRS.DebugHelper &&
                    window.HelpOTRS.FormDataReuser &&
                    window.HelpOTRS.QueueValidator &&
                    window.HelpOTRS.ServiceTypeValidator &&
                    window.HelpOTRS.ClassificationValidator) {
                    resolve();
                } else {
                    setTimeout(checkModules, 100);
                }
            };
            checkModules();
        });
    }

    /**
     * Classe principal da aplica√ß√£o
     */
    class HelpOtrsApp {
    constructor() {
        this.configManager = null;
        this.formDataReuser = null;
        this.debugHelper = null;
        this.queueValidator = null;
        this.serviceTypeValidator = null;
        this.classificationValidator = null;
        this.initialized = false;
    }

    /**
     * Aguardar tempo especificado
     * @param {number} ms - Milissegundos para aguardar
     * @returns {Promise<void>}
     */
    async delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * Verificar se √© uma p√°gina de cria√ß√£o de ticket
     * @returns {boolean}
     */
    isTicketCreationPage() {
        const url = window.location.href;
        return url.includes('Action=AgentTicketPhone') || 
               url.includes('Action=AgentTicketEmail') || 
               url.includes('Action=CustomerTicketMessage') ||
               url.includes('/ticket/create') ||
               url.includes('/new-ticket');
    }

    /**
     * Verificar se √© uma p√°gina de nota de ticket
     * @returns {boolean}
     */
    isTicketNotePage() {
        const url = window.location.href;
        return url.includes('Action=AgentTicketNote') || 
               url.includes('/ticket/') && url.includes('/note');
    }

    /**
     * Verificar se √© uma p√°gina de zoom de ticket
     * @returns {boolean}
     */
    isTicketZoomPage() {
        const url = window.location.href;
        return url.includes('Action=AgentTicketZoom') || 
               url.includes('/ticket/zoom');
    }

    /**
     * Verificar se o usu√°rio √© o propriet√°rio do ticket
     * @returns {boolean}
     */
    isOwner() {
        // TODO: Implementar l√≥gica espec√≠fica baseada no DOM
        return true; // Placeholder
    }

    /**
     * Verificar se o ticket est√° em atendimento
     * @returns {boolean}
     */
    isTicketInService() {
        // TODO: Implementar l√≥gica espec√≠fica baseada no DOM
        return true; // Placeholder
    }

    /**
     * Inicializar todos os m√≥dulos
     * @returns {Promise<void>}
     */
    async initializeModules() {
        console.log('Help OTRS: Inicializando m√≥dulos...');

        // Inicializar ConfigManager primeiro (depend√™ncia de todos os outros)
        this.configManager = new window.HelpOTRS.ConfigManager();
        await this.configManager.loadConfig();

        // Inicializar DebugHelper (para debug e testes)
        this.debugHelper = new window.HelpOTRS.DebugHelper(this.configManager);
        
        // Inicializar sistema de alertas
        this.alertSystem = new window.HelpOTRS.AlertSystem();
        
        // Sistema de alertas simples para inje√ß√£o de depend√™ncia
        const alertSystem = this.alertSystem;

        // Inicializar validadores
        this.queueValidator = new window.HelpOTRS.QueueValidator(this.configManager, alertSystem);
        this.serviceTypeValidator = new window.HelpOTRS.ServiceTypeValidator(this.configManager, alertSystem);
        
        // Inicializar classifica√ß√£o validator
        this.classificationValidator = new window.HelpOTRS.ClassificationValidator();
        this.classificationValidator.init(alertSystem);

        // Inicializar reaproveitador de dados
        this.formDataReuser = new window.HelpOTRS.FormDataReuser(this.configManager, alertSystem);

        // Configurar interface global de debug
        this.debugHelper.setupGlobalDebugInterface();

        console.log('Help OTRS: M√≥dulos inicializados com sucesso');
    }

    /**
     * Executar valida√ß√µes baseadas no tipo de p√°gina
     * @returns {Promise<void>}
     */
    async executePageSpecificLogic() {
        const userProfile = this.configManager.getUserProfile();
        console.log('Help OTRS: Perfil do usu√°rio:', userProfile);

        if (this.isTicketCreationPage()) {
            console.log('Help OTRS: P√°gina de cria√ß√£o de ticket detectada');
            
            // Inicializar validadores para p√°gina de cria√ß√£o
            this.queueValidator.init();
            this.serviceTypeValidator.init();
            
            // Fazer valida√ß√£o inicial com delay
            setTimeout(() => {
                this.serviceTypeValidator.validateServiceTypeForQueue();
            }, 1000);
        }

        if (this.isTicketNotePage()) {
            console.log('Help OTRS: P√°gina de nota de ticket detectada');
            
            // Inicializar observadores espec√≠ficos para notas
            this.serviceTypeValidator.init();
        }

        if (this.isTicketZoomPage() && this.isOwner() && this.isTicketInService()) {
            console.log('Help OTRS: P√°gina de zoom de ticket detectada');
            
            // Inicializar valida√ß√£o de fila
            this.queueValidator.init();
        }
        
        // Inicializar reaproveitamento de dados do formul√°rio (se habilitado)
        if (this.configManager.isFeatureEnabled('formDataReuser')) {
            setTimeout(() => {
                this.formDataReuser.init();
            }, 1000);
        }
    }

    /**
     * Configurar listener para atualiza√ß√µes de configura√ß√£o
     */
    setupConfigurationListener() {
        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
            if (request.type === 'CONFIG_UPDATED') {
                this.configManager.config = request.config;
                this.configManager.detectCurrentOtrsSystem();
                console.log('Help OTRS: Configura√ß√£o atualizada');
                
                // Recarregar a p√°gina para aplicar novas configura√ß√µes
                if (this.configManager.isExtensionEnabledForCurrentSite()) {
                    location.reload();
                }
                
                // Importante: retornar false para indicar resposta s√≠ncrona
                return false;
            }
            
            // Se n√£o reconheceu a mensagem, retornar false
            return false;
        });
    }

    /**
     * Fun√ß√£o principal de inicializa√ß√£o
     * @returns {Promise<boolean>}
     */
    async init() {
        if (this.initialized) {
            console.log('Help OTRS: Aplica√ß√£o j√° foi inicializada');
            return true;
        }

        console.log('=== HELP OTRS INIT START ===');
        
        try {
            // Inicializar m√≥dulos
            await this.initializeModules();
            
            console.log('Help OTRS: Verificando se extens√£o est√° habilitada...');
            console.log('Help OTRS: Configura√ß√£o carregada:', this.configManager.config);
            console.log('Help OTRS: Sistema atual detectado:', this.configManager.currentOtrsSystem);
            console.log('Help OTRS: URL atual:', window.location.href);
            
            // Verificar se h√° sistemas configurados
            if (!this.configManager.config || !this.configManager.config.otrs_systems || this.configManager.config.otrs_systems.length === 0) {
                console.log('üîß Help OTRS: Nenhum sistema OTRS configurado!');
                console.log('üìù Help OTRS: Para usar a extens√£o, acesse as configura√ß√µes e adicione pelo menos um sistema OTRS.');
                console.log('‚öôÔ∏è Help OTRS: Clique no √≠cone da extens√£o na barra de ferramentas para abrir as configura√ß√µes.');
                console.log('=== HELP OTRS INIT END (NO SYSTEMS CONFIGURED) ===');
                return false;
            }
            
            // Verificar se a extens√£o est√° habilitada para este site
            if (!this.configManager.isExtensionEnabledForCurrentSite()) {
                console.log('‚ùå Help OTRS: Extens√£o desabilitada para este site');
                console.log('Help OTRS: Sistemas configurados:', this.configManager.config?.otrs_systems?.map(s => ({
                    name: s.name,
                    enabled: s.enabled,
                    baseUrl: s.baseUrl,
                    hostname: s.baseUrl ? new URL(s.baseUrl).hostname : 'URL inv√°lida'
                })));
                console.log('üí° Help OTRS: Para habilitar neste site, adicione um sistema OTRS com o hostname:', new URL(window.location.href).hostname);
                console.log('=== HELP OTRS INIT END (DISABLED) ===');
                return false;
            }

            console.log('‚úÖ Help OTRS: Extens√£o HABILITADA! Iniciando para', this.configManager.currentOtrsSystem.name);

            // Executar l√≥gica espec√≠fica da p√°gina
            await this.executePageSpecificLogic();
            
            // Configurar listener de configura√ß√£o
            this.setupConfigurationListener();
            
            this.initialized = true;
            console.log('‚úÖ Help OTRS: Inicializa√ß√£o conclu√≠da com sucesso');
            console.log('=== HELP OTRS INIT END (SUCCESS) ===');
            return true;

        } catch (error) {
            console.error('‚ùå Help OTRS: Erro durante inicializa√ß√£o:', error);
            console.log('=== HELP OTRS INIT END (ERROR) ===');
            return false;
        }
    }

    /**
     * Limpar recursos da aplica√ß√£o
     */
    destroy() {
        if (this.formDataReuser) {
            this.formDataReuser.destroy();
        }
        
        if (this.queueValidator) {
            this.queueValidator.destroy?.();
        }
        
        if (this.serviceTypeValidator) {
            this.serviceTypeValidator.destroy?.();
        }
        
        if (this.classificationValidator) {
            this.classificationValidator.dispose?.();
        }
        
        this.initialized = false;
        console.log('Help OTRS: Recursos limpos');
    }

    /**
     * Obter informa√ß√µes da aplica√ß√£o
     * @returns {Object}
     */
    getAppInfo() {
        const manifest = chrome.runtime.getManifest();
        return {
            name: manifest.name,
            version: manifest.version,
            versionName: manifest.version_name || 'Build padr√£o',
            author: manifest.author,
            manifestVersion: manifest.manifest_version,
            initialized: this.initialized,
            currentSystem: this.configManager?.currentOtrsSystem?.name || 'Nenhum',
            userProfile: this.configManager?.getUserProfile() || 'Desconhecido'
        };
    }
}

// Inst√¢ncia global da aplica√ß√£o
const helpOtrsApp = new HelpOtrsApp();

    // Event listener principal
    window.addEventListener("load", async function () {
        console.log('Help OTRS: Aguardando carregamento de m√≥dulos...');
        await waitForModules();
        
        // Obter informa√ß√µes da extens√£o
        const appInfo = helpOtrsApp.getAppInfo();    console.log('=== HELP OTRS DEBUG START ===');
    console.log(`üì¶ Help OTRS - MAPA v${appInfo.version} (${appInfo.versionName})`);
    console.log(`üë• Desenvolvido por: ${appInfo.author}`);
    console.log(`üìÖ Manifest Version: ${appInfo.manifestVersion}`);
    console.log('Help OTRS: Window load event disparado');
    console.log('Help OTRS: URL:', window.location.href);
    console.log('Help OTRS: Hostname:', window.location.hostname);
    console.log('Help OTRS: Protocol:', window.location.protocol);
    console.log('Help OTRS: Pathname:', window.location.pathname);
    console.log('Help OTRS: Search:', window.location.search);
    
    // Aguardar delay configur√°vel (ser√° carregado na inicializa√ß√£o)
    console.log('Help OTRS: Aguardando delay padr√£o de 1000ms');
    await helpOtrsApp.delay(1000);

    console.log('Help OTRS: Chamando init()');
    const result = await helpOtrsApp.init();
    console.log(`=== HELP OTRS DEBUG END v${appInfo.version} ===`);
    return result;
});

    // Disponibilizar globalmente
    window.HelpOtrsApp = helpOtrsApp;

})();
